/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/shohagrana64/crd/pkg/apis/stable.example.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DisappointmentLister helps list Disappointments.
// All objects returned here must be treated as read-only.
type DisappointmentLister interface {
	// List lists all Disappointments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Disappointment, err error)
	// Disappointments returns an object that can list and get Disappointments.
	Disappointments(namespace string) DisappointmentNamespaceLister
	DisappointmentListerExpansion
}

// disappointmentLister implements the DisappointmentLister interface.
type disappointmentLister struct {
	indexer cache.Indexer
}

// NewDisappointmentLister returns a new DisappointmentLister.
func NewDisappointmentLister(indexer cache.Indexer) DisappointmentLister {
	return &disappointmentLister{indexer: indexer}
}

// List lists all Disappointments in the indexer.
func (s *disappointmentLister) List(selector labels.Selector) (ret []*v1alpha1.Disappointment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Disappointment))
	})
	return ret, err
}

// Disappointments returns an object that can list and get Disappointments.
func (s *disappointmentLister) Disappointments(namespace string) DisappointmentNamespaceLister {
	return disappointmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DisappointmentNamespaceLister helps list and get Disappointments.
// All objects returned here must be treated as read-only.
type DisappointmentNamespaceLister interface {
	// List lists all Disappointments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Disappointment, err error)
	// Get retrieves the Disappointment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Disappointment, error)
	DisappointmentNamespaceListerExpansion
}

// disappointmentNamespaceLister implements the DisappointmentNamespaceLister
// interface.
type disappointmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Disappointments in the indexer for a given namespace.
func (s disappointmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Disappointment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Disappointment))
	})
	return ret, err
}

// Get retrieves the Disappointment from the indexer for a given namespace and name.
func (s disappointmentNamespaceLister) Get(name string) (*v1alpha1.Disappointment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("disappointment"), name)
	}
	return obj.(*v1alpha1.Disappointment), nil
}
